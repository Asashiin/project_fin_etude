const superagent = require('superagent')
// definition route api
const gtex = 'rest.ensembl.org/variation/human/'
const ensembl37 = 'grch37.rest.ensembl.org/'
// const ensembl38 = 'rest.ensembl.org/'
const gwas = 'www.ebi.ac.uk/gwas/beta/rest/api/singleNucleotidePolymorphisms/'
// search RS api ncbi
async function searchRSNcbi (rs, res) {
  let rsId = rs.substr(2, rs.length)
  const ncbi = await superagent.get('https://api.ncbi.nlm.nih.gov/variation/v0/beta/refsnp/' + rsId).set('Accept', 'application/json')
  console.log('test ncbi_snp' + ncbi.body.refsnp_id)
  let previousMergeList = []
  for (let i in ncbi.body.dbsnp1_merges) {
    previousMergeList.push('rs' + ncbi.body.dbsnp1_merges[i].merged_rsid)
  }
  let result = {
    name: 'rs' + ncbi.body.refsnp_id,
    previousMerge: previousMergeList
  }
  console.log('test result' + result.name + result.previousMerge[0])
}
/* async function APIEnsembl (rs) {
  try {
    // recupération info sur Grch37 et 38
    const ensbl37 = await superagent.get(ensembl37 + 'variation/human/' + rs).set('Accept', 'application/json')
    // const ensbl38 = await superagent.get(ensembl38 + 'variation/human/' + rs).set('Accept', 'application/json')
    let acces37 = ensbl37.body
    // let acces38 = ensbl38.body
    const gw = await superagent.get(gwas + rs).set('Accept', 'application/json')
    // const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
    let geneids = []
    let geneList = []
    for (let i in gw.body.genomicContexts) {
      if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
        geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
      } else {
        geneList.push('NAN')
      }
    }
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        // voir si il faut utiliser le 37 ou  le 38 , et mettre en place accès au deux
        const gtsearch = await superagent.get(ensembl37 + 'lookup/id/' + id).set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variants = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + acces37.minor_allele + '_' + acces37.ancestral_allele + '_b37'
          let resultat = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variants,
            snp: rs
          }
          geneids.push(resultat)
        }
      }
    }
    let result = {
      name: acces37.name,
      conseq: acces37.most_severe_consequence,
      maf: acces37.MAF,
      location: acces37.mappings[0].location,
      start: acces37.mappings[0].start,
      end: acces37.mappings[0].end,
      seq: acces37.mappings[0].seq_region_name,
      allele: acces37.mappings[0].allele_string,
      ancestral: acces37.ancestral_allele,
      variant: acces37.synonyms,
      clinicSigni: acces37.clinical_significance,
      gtexvalue: geneids
    }
    return result
  } catch (err) {
    // console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
} */
async function APIEnsembl (rs) {
  try {
    let tab = []
    for (let i = 0; i < rs.length; i++) {
      // recupération info sur Grch37 et 38
      const ensbl37 = await superagent.get(ensembl37 + 'variation/human/' + rs[i]).set('Accept', 'application/json')
      // const ensbl38 = await superagent.get(ensembl38 + 'variation/human/' + rs).set('Accept', 'application/json')
      let acces37 = ensbl37.body
      // let acces38 = ensbl38.body
      const gw = await superagent.get(gwas + rs[i]).set('Accept', 'application/json')
      // const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
      let geneids = []
      let geneList = []
      for (let i in gw.body.genomicContexts) {
        if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
          geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
        } else {
          geneList.push('NAN')
        }
      }
      for (let i in geneList) {
        if (geneList[i] !== 'NAN') {
          const id = geneList[i]
          // voir si il faut utiliser le 37 ou  le 38 , et mettre en place accès au deux
          const gtsearch = await superagent.get(ensembl37 + 'lookup/id/' + id).set('Accept', 'application/json')
          if (typeof gtsearch.body !== 'undefined') {
            const variants = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + acces37.minor_allele + '_' + acces37.ancestral_allele + '_b37'
            let resultat = {
              geneid: id,
              symbol: gtsearch.body.display_name,
              variantid: variants,
              snp: rs[i]
            }
            geneids.push(resultat)
          }
        }
      }
      let result = {
        name: acces37.name,
        conseq: acces37.most_severe_consequence,
        maf: acces37.MAF,
        location: acces37.mappings[0].location,
        start: acces37.mappings[0].start,
        end: acces37.mappings[0].end,
        seq: acces37.mappings[0].seq_region_name,
        allele: acces37.mappings[0].allele_string,
        ancestral: acces37.ancestral_allele,
        variant: acces37.synonyms,
        clinicSigni: acces37.clinical_significance,
        gtexvalue: geneids
      }
      tab.push(result)
    }
    console.log('tableau func API : ' + tab)
    return tab
  } catch (err) {
    // console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
}
async function searchRs (rs, res) {
  try {
    const gt = await superagent.get(gtex + rs).set('Accept', 'application/json')
    const gw = await superagent.get(gwas + rs).set('Accept', 'application/json')
    const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
    let geneList = []
    let geneNameList = []
    let asso = {}
    for (let i in gwAsso.body._embedded.associations) {
      asso.snp = gwAsso.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName
      asso.pvalue = gwAsso.body._embedded.associations[i].pvalue
    }
    for (let i in gw.body.genomicContexts) {
      if (typeof (gw.body.genomicContexts[i].gene.geneName) !== 'undefined') {
        geneNameList.push(gw.body.genomicContexts[i].gene.geneName)
      }
      if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
        geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
      } else {
        geneList.push('NAN')
      }
    }
    /* let results = []
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/' + id).set('Accept', 'application/json')
        // const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/ENSG00000139344').set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variant = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + minor + '_' + ancestral + '_b37'
          let result = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variant,
            snp: rs
          }
          results.push(result)
        }
      }
    }
    return results
    */
    // const val = gtexApi(rs, geneList, gt.body.minor_allele, gt.body.ancestral_allele)
    let geneids = []
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/' + id).set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variant = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + gt.body.minor_allele + '_' + gt.body.ancestral_allele + '_b37'
          let result = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variant,
            snp: rs
          }
          geneids.push(result)
        }
      }
    }
    // const gtest = await superagent.get(ensembl37 + 'eqtl/variant_name/homo_sapiens/rs6538678?stable_id=ENSG00000139344').set('Accept', 'application/json')
    let result = {
      name: gt.body.name,
      location: gt.body.mappings[0].location,
      start: gt.body.mappings[0].start,
      end: gt.body.mappings[0].end,
      seq: gt.body.mappings[0].seq_region_name,
      allele: gt.body.mappings[0].allele_string,
      variant: gt.body.synonyms,
      assoSnp: asso.snp,
      assopValue: asso.pvalue,
      gtexvalue: geneids
    }
    return result
  } catch (err) {
    console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
}
async function searchAssociationsByTraits (trait, res) {
  const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByEfoTrait?efoTrait=' + trait).set('Accept', 'application/json')
  let assoSnp = []
  let assoPvalue = []
  for (let i in gw.body._embedded.associations) {
    assoSnp.push(gw.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName)
    assoPvalue.push(gw.body._embedded.associations[i].pvalue)
  }
  let result = {
    snp: assoSnp,
    pvalue: assoPvalue
  }
  res.render('association', {
    dataAsso: result
  })
}
async function searchSnpByLocation (location, res) {
  const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/snpLocation/' + location).set('Accept', 'application/json')
  let snpList = []
  for (let i in gw.body._embedded.singleNucleotidePolymorphisms) {
    snpList.push(gw.body._embedded.singleNucleotidePolymorphisms[i].rsId)
  }
  console.log('snp0' + snpList[0])
  let result = {
    snp: snpList
  }
  res.render('location', {
    dataLoc: result
  })
}
module.exports.APIEnsembl = APIEnsembl
module.exports.searchRSNcbi = searchRSNcbi
module.exports.searchRs = searchRs
module.exports.searchSnpByLocation = searchSnpByLocation
module.exports.searchAssociationsByTraits = searchAssociationsByTraits
