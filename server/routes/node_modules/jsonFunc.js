const superagent = require('superagent')
// definition route api
const ensembl37 = 'grch37.rest.ensembl.org/'
const ensembl38 = 'rest.ensembl.org/'
// const gwas = 'www.ebi.ac.uk/gwas/beta/rest/api/singleNucleotidePolymorphisms/'
// search RS api ncbi
async function searchRSNcbi (rs, res) {
  let rsId = rs.substr(2, rs.length)
  const ncbi = await superagent.get('https://api.ncbi.nlm.nih.gov/variation/v0/beta/refsnp/' + rsId).set('Accept', 'application/json')
  console.log('test ncbi_snp' + ncbi.body.refsnp_id)
  let previousMergeList = []
  for (let i in ncbi.body.dbsnp1_merges) {
    previousMergeList.push('rs' + ncbi.body.dbsnp1_merges[i].merged_rsid)
  }
  let result = {
    name: 'rs' + ncbi.body.refsnp_id,
    previousMerge: previousMergeList
  }
  console.log('test result' + result.name + result.previousMerge[0])
}
/* async function APIEnsembl(rs) {
  try {
    const ensbl37 = await superagent.get(ensembl37 + 'variation/human/' + rs).set('Accept', 'application/json')
    const ensbl38 = await superagent.get(ensembl38 + 'variation/human/' + rs).set('Accept', 'application/json')
    let acces37 = ensbl37.body
    let acces38 = ensbl38.body

    // GWAS IS GrCh38 de base
    const gw = await superagent.get(gwas + rs).set('Accept', 'application/json')
    const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
    let geneids = []
    let geneList = []
    for (let i in gw.body.genomicContexts) {
      if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
        geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
      } else {
        geneList.push('NAN')
      }
    }
    let assoList = []
    let assoInfo = []
    for (let i in gwAsso.body._embedded.associations) {
      if (typeof (gwAsso.body._embedded.associations[i]) !== 'undefined') {
        assoList.push(gwAsso.body.embedded.associations[i])
      } else {
        assoList.push('NAN')
      }
    }

    for (let i in assoList) {
      if (assoList[i] !== 'NAN') {
        let result = {
          name: assoList.loci.strongestRiskAlleles[0].riskAlleleName,
          riskFrequency: assoList.riskFrequency,
          pvalue: assoList.pavalueMantissa + " * 10^" + assoList.pavalueExponent,
          ciRange: assoList.range,
          or: assoList.orPerCopyNum
        }
        assoInfo.push(result)
      }
    }
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        // voir si il faut utiliser le 37 ou  le 38 , et mettre en place accès au deux
        const gtsearch = await superagent.get(ensembl37 + 'lookup/id/' + id).set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variants = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + acces37.minor_allele + '_' + acces37.ancestral_allele + '_b37'
          let result = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variants,
            snp: rs
          }
          geneids.push(result)
        }
      }
    }
    let result = {
      name: acces37.name,
      conseq: acces37.most_severe_consequence,
      maf: acces37.MAF,
      location: acces37.mappings[0].location,
      start: acces37.mappings[0].start,
      end: acces37.mappings[0].end,
      seq: acces37.mappings[0].seq_region_name,
      allele: acces37.mappings[0].allele_string,
      ancestral: acces37.ancestral_allele,
      variant: acces37.synonyms,
      clinicSigni: acces37.clinical_significance,
      gtexvalue: geneids,
      gwasvalue: assoInfo
    }
    return result
  } catch (err) {

    let erreur = 'ER' + err
    return erreur
  }

}

} */
async function APIEnsembl (rs, popu, size) {
  try {
    let tab = []
    for (let i = 0; i < rs.length; i++) {
      // recupération info sur Grch37 et 38
      const ensbl37 = await superagent.get(ensembl37 + 'variation/human/' + rs[i]).set('Accept', 'application/json')
      const ensbl38 = await superagent.get(ensembl38 + 'variation/human/' + rs[i]).set('Accept', 'application/json')
      let acces37 = ensbl37.body
      let acces38 = ensbl38.body
      // const gw = await superagent.get(gwas + rs[i]).set('Accept', 'application/json')
      // const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
      const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs[i]).set('Accept', 'application/json')
      let listAsso = []
      let listInfo = []
      let listSyn = []
      // let listAssoLinks = []
      for (let h in acces38.synonyms) {
        let str = acces38.synonyms[h].substr(0, 2)
        if (str === 'rs') {
          listSyn.push(acces38.synonyms[h])
        }
      }
      for (let x in gwAsso.body._embedded.associations) {
        if (typeof (gwAsso.body._embedded.associations[x]) !== 'undefined') {
          listAsso.push(gwAsso.body._embedded.associations[x])
        } else {
          listAsso.push('NAN')
        }
      }
      for (let z in listAsso) {
        let nr = 'NR'
        let links = {
          self: listAsso[z]._links.self.href,
          associations: listAsso[z]._links.association.href,
          study: listAsso[z]._links.study.href,
          efoTraits: listAsso[z]._links.efoTraits.href,
          snps: listAsso[z]._links.snps.href
        }
        /** Récupération lien et info lien Traits   ***/
        const gwAssoTrait = await superagent.get(links.efoTraits).set('Accept', 'application/json')
        // console.log('TRAIT TEST' + gwAssoTrait.body)
        let listTrait = []
        let traitLinks
        if (gwAssoTrait !== 'undefined') {
          for (let a in gwAssoTrait.body._embedded.efoTraits) {
            listTrait.push(gwAssoTrait.body._embedded.efoTraits[a].trait)
            traitLinks = gwAssoTrait.body._embedded.efoTraits[a].uri
          }
        }
        /** Récupération lien et info lien study  ***/
        const gwAssoStudy = await superagent.get(links.study).set('Accept', 'application/json')
        // console.log('TRAIT TEST' + gwAssoTrait.body)
        let study = {}
        if (gwAssoStudy !== 'undefined') {
          study = {
            author: gwAssoStudy.body.author,
            publicationDate: gwAssoStudy.body.publicationDate,
            publication: gwAssoStudy.body.publication,
            title: gwAssoStudy.body.title,
            initialSampleSize: gwAssoStudy.body.initialSampleSize,
            pubmedId: gwAssoStudy.body.pubmedId,
            snpCount: gwAssoStudy.body.snpCount,
            accessionId: gwAssoStudy.body.accessionId
          }
        }
        if (listAsso[z] !== 'NAN') {
          if (listAsso[z].riskFrequency === null) {
            listAsso[z].riskFrequency = nr
          }
          if (listAsso[z].range === null) {
            listAsso[z].range = nr
          }
          if (listAsso[z].pvalue === null) {
            listAsso[z].pvalue = nr
          }
          if (listAsso[z].orPerCopyNum === null) {
            listAsso[z].orPerCopyNum = nr
          }
          let resultatAsso = {
            name: listAsso[z].loci[0].strongestRiskAlleles[0].riskAlleleName,
            riskFrequency: listAsso[z].riskFrequency,
            pvalue: listAsso[z].pvalueMantissa + '*10^' + listAsso[z].pvalueExponent,
            range: listAsso[z].range,
            or: listAsso[z].orPerCopyNum,
            study: study,
            trait: {
              listname: listTrait,
              traitlink: traitLinks
            }
          }
          listInfo.push(resultatAsso)
        }
      }
      // R2 -> Test: rs1042779; population: Vietnam; size: 500
      // let adr = ensembl38 + 'ld/human/' + rs[i] + '/' + popu + '?window_size=' + size
      let adr = ensembl38 + 'ld/human/' + rs[i] + '/' + popu + '?window_size=' + size
      const rcarre = await superagent.get(adr).set('Accept', 'application/json')
      let listr2 = []
      for (let m in rcarre.body) {
        let rd = {
          name: rcarre.body[m].variation2,
          r2: rcarre.body[m].r2
        }
        listr2.push(rd)
      }
      listr2.sort(function (a, b) {
        return a.r2 - b.r2
      })
      let index = listr2.length
      let listmaxr2 = []
      for (let n = index - 1; n > index - 6; n--) {
        if (typeof listr2[n] !== 'undefined') {
          let r = {
            nom: listr2[n].name,
            r2: listr2[n].r2
          }
          listmaxr2.push(r)
        }
      }
      // Information GTEX
      const tisu = await superagent.get('rest.ensembl.org/eqtl/tissue/homo_sapiens').set('Accept', 'application/json')
      let tabtissu = Object.keys(tisu.body)
      let tabgene = []
      for (let w in tabtissu) {
        // http://rest.ensembl.org/eqtl/variant_name/homo_sapiens/rs6538678?content-type=application/json;statistic=p-value;tissue=Thyroid
        const gtex = await superagent.get('rest.ensembl.org/eqtl/variant_name/homo_sapiens/' + rs[i] + '?statistic=p-value;tissue=' + tabtissu[w]).set('Accept', 'application/json')
        let tabl = []
        // let tabgene = []
        if (gtex.body.length !== 0) {
          for (let x in gtex.body) {
            let gene = {
              namegene: gtex.body[x].gene,
              pvalue: gtex.body[x].value
            }
            tabl.push(gene)
          }
          tabl.sort(function (a, b) {
            return a.pvalue - b.pvalue
          })
          const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/' + tabl[0].namegene).set('Accept', 'application/json')
          let gen = {
            geneid: tabl[0].namegene,
            symbol: gtsearch.body.display_name,
            pvalue: tabl[0].pvalue,
            tissu: tabtissu[w]
          }
          tabgene.push(gen)
        }
      }
      let result = {
        name: acces38.name,
        conseq: acces38.most_severe_consequence,
        maf: acces38.MAF,
        minor: acces38.minor_allele,
        location: acces38.mappings[0].location,
        location2: acces37.mappings[0].location,
        start: acces38.mappings[0].start,
        end: acces38.mappings[0].end,
        seq: acces38.mappings[0].seq_region_name,
        allele: acces38.mappings[0].allele_string,
        ancestral: acces38.ancestral_allele,
        variant: listSyn,
        clinicSigni: acces38.clinical_significance,
        gwasvalue: listInfo,
        r2: listmaxr2,
        gtexvalue: tabgene,
        pop: popu,
        size: size
      }
      tab.push(result)
    }
    return tab
  } catch (err) {
    // console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
}
/* async function searchRs (rs, res) {
  try {
    const gt = await superagent.get(gtex + rs).set('Accept', 'application/json')
    const gw = await superagent.get(gwas + rs).set('Accept', 'application/json')
    const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
    let geneList = []
    let geneNameList = []
    let asso = {}
    for (let i in gwAsso.body._embedded.associations) {
      asso.snp = gwAsso.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName
      asso.pvalue = gwAsso.body._embedded.associations[i].pvalue
    }
    for (let i in gw.body.genomicContexts) {
      if (typeof (gw.body.genomicContexts[i].gene.geneName) !== 'undefined') {
        geneNameList.push(gw.body.genomicContexts[i].gene.geneName)
      }
      if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
        geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
      } else {
        geneList.push('NAN')
      }
    }
     let results = []
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/' + id).set('Accept', 'application/json')
        // const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/ENSG00000139344').set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variant = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + minor + '_' + ancestral + '_b37'
          let result = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variant,
            snp: rs
          }
          results.push(result)
        }
      }
    }
    return results
    // const val = gtexApi(rs, geneList, gt.body.minor_allele, gt.body.ancestral_allele)
    let geneids = []
    for (let i in geneList) {
      if (geneList[i] !== 'NAN') {
        const id = geneList[i]
        const gtsearch = await superagent.get('rest.ensembl.org/lookup/id/' + id).set('Accept', 'application/json')
        if (typeof gtsearch.body !== 'undefined') {
          const variant = gtsearch.body.seq_region_name + '_' + gtsearch.body.end + '_' + gt.body.minor_allele + '_' + gt.body.ancestral_allele + '_b37'
          let result = {
            geneid: id,
            symbol: gtsearch.body.display_name,
            variantid: variant,
            snp: rs
          }
          geneids.push(result)
        }
      }
    }
    // const gtest = await superagent.get(ensembl37 + 'eqtl/variant_name/homo_sapiens/rs6538678?stable_id=ENSG00000139344').set('Accept', 'application/json')
    let result = {
      name: gt.body.name,
      location: gt.body.mappings[0].location,
      start: gt.body.mappings[0].start,
      end: gt.body.mappings[0].end,
      seq: gt.body.mappings[0].seq_region_name,
      allele: gt.body.mappings[0].allele_string,
      variant: gt.body.synonyms,
      assoSnp: asso.snp,
      assopValue: asso.pvalue,
      gtexvalue: geneids
    }
    return result
  } catch (err) {
    console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
} */
/* async function searchAssociationsByTraits(trait, res) {
  const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByEfoTrait?efoTrait=' + trait).set('Accept', 'application/json')
  let assoSnp = []
  let assoPvalue = []
  for (let i in gw.body._embedded.associations) {
    assoSnp.push(gw.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName)
    assoPvalue.push(gw.body._embedded.associations[i].pvalue)
  }
  let result = {
    snp: assoSnp,
    pvalue: assoPvalue
  }
  res.render('association', {
    dataAsso: result
  })
} */
async function searchSnpByLocation (location, popu, size, nbmax) {
  try {
    let tab = []
    let snpList = []
    // console.log('json test :' + JSON.stringify(location))
    // let maxloc = Math.max(location.length, nbmax)
    console.log('nb_max : ' + nbmax)
    for (let i = 0; i < location.length; i++) {
      if (location[i]) {
        // GrCh38 pour l'instant seulement
        // console.log('boucle tour : ' + i)
        const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/snpLocation/' + location[i]).set('Accept', 'application/json')
        for (let j = 0; j < gw.body._embedded.singleNucleotidePolymorphisms.length; j++) {
          if (j < nbmax) {
            snpList.push(gw.body._embedded.singleNucleotidePolymorphisms[j].rsId)
          }
        }
        let result = {
          snp: snpList,
          pop: popu,
          size: size
        }
        tab.push(result)
      }
    }
    return tab
  } catch (err) {
    // console.error('Error 2 : ' + err)
    let erreur = 'ER' + err
    return erreur
  }
}
async function searchPopu () {
  try {
    const popu = await superagent.get(ensembl38 + 'info/variation/populations/homo_sapiens?filter=LD').set('Accept', 'application/json')
    let listpopu = []
    for (let i in popu.body) {
      let pop = {
        name: popu.body[i].name,
        desc: popu.body[i].description
      }
      listpopu.push(pop)
    }
    return listpopu
  } catch (err) {
    return err
  }
}
module.exports.APIEnsembl = APIEnsembl
module.exports.searchSnpByLocation = searchSnpByLocation
module.exports.searchRSNcbi = searchRSNcbi
module.exports.searchPopu = searchPopu
// module.exports.searchRs = searchRs
// module.exports.searchAssociationsByTraits = searchAssociationsByTraits
