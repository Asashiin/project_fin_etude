const superagent = require('superagent')
// definition route api
const gtex = 'rest.ensembl.org/variation/human/'
const ensembl37 = 'grch37.rest.ensembl.org/'
const ensembl38 = 'rest.ensembl.org/'
const gwas = 'www.ebi.ac.uk/gwas/beta/rest/api/singleNucleotidePolymorphisms/'
// search RS api ncbi
async function searchRSNcbi(rs, res) {
  let rsId = rs.substr(2, rs.length)
  const ncbi = await superagent.get('https://api.ncbi.nlm.nih.gov/variation/v0/beta/refsnp/' + rsId).set('Accept', 'application/json')
  console.log('test ncbi_snp' + ncbi.body.refsnp_id)
  let previousMergeList = []
  for (let i in ncbi.body.dbsnp1_merges) {
    previousMergeList.push('rs' + ncbi.body.dbsnp1_merges[i].merged_rsid)
  }
  let result = {
    name: 'rs' + ncbi.body.refsnp_id,
    previousMerge: previousMergeList
  }
  console.log('test result' + result.name + result.previousMerge[0])
  /* res.render('snpInfo', {
    data: result
  }) */
}
async function APIEnsembl(rs) {
  //recup√©ration info sur Grch37 et 38 
  const ensbl37 = await superagent.get(ensembl37 + 'variation/human/' + rs).set('Accept', 'application/json')
  const ensbl38 = await superagent.get(ensembl38 + 'variation/human/' + rs).set('Accept', 'application/json')
  let acces37 = ensbl37.body
  let acces38 = ensbl38.body
  let result = {
    name: acces37.name,
    conseq: acces37.most_severe_consequence,
    maf: acces37.MAF,
    location: acces37.mappings[0].location,
    start: acces37.mappings[0].start,
    end: acces37.mappings[0].end,
    seq: acces37.mappings[0].seq_region_name,
    allele: acces37.mappings[0].allele_string,
    ancestral: acces37.ancestral_allele,
    variant: acces37.synonyms,
    clinicSigni: acces37.clinical_significance
  }
  /*res.render('testAPIEnsembl', {
     data: result
   })*/
  return result
}
async function searchRs(rs, res) {
  const gt = await superagent.get(gtex + rs).set('Accept', 'application/json')
  const gw = await superagent.get(gwas + rs).set('Accept', 'application/json')
  const gwAsso = await superagent.get('www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByRsId?rsId=' + rs).set('Accept', 'application/json')
  let geneList = []
  let geneNameList = []
  let asso = {}
  for (let i in gwAsso.body._embedded.associations) {
    asso.snp = gwAsso.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName
    asso.pvalue = gwAsso.body._embedded.associations[i].pvalue
  }
  for (let i in gw.body.genomicContexts) {
    if (typeof (gw.body.genomicContexts[i].gene.geneName) !== 'undefined') {
      geneNameList.push(gw.body.genomicContexts[i].gene.geneName)
    }
    if (typeof (gw.body.genomicContexts[i].gene.ensemblGeneIds[0]) !== 'undefined') {
      geneList.push(gw.body.genomicContexts[i].gene.ensemblGeneIds[0].ensemblGeneId)
    } else {
      geneList.push('NAN')
    }
  }
  let result = {
    name: gt.body.name,
    location: gt.body.mappings[0].location,
    start: gt.body.mappings[0].start,
    end: gt.body.mappings[0].end,
    seq: gt.body.mappings[0].seq_region_name,
    allele: gt.body.mappings[0].allele_string,
    variant: gt.body.synonyms,
    genesName: geneNameList,
    genes: geneList,
    assoSnp: asso.snp,
    assopValue: asso.pvalue
  }
  res.render('snpInfo', {
    data: result
  })
}
async function searchAssociationsByTraits(trait, res) {
  const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/associations/search/findByEfoTrait?efoTrait=' + trait).set('Accept', 'application/json')
  let assoSnp = []
  let assoPvalue = []
  /* let reportedGeneList = []
   let mappedGeneList = []
   let locationEachRs = []
   let geneNameList = [] */
  for (let i in gw.body._embedded.associations) {
    assoSnp.push(gw.body._embedded.associations[i].loci[0].strongestRiskAlleles[0].riskAlleleName)
    assoPvalue.push(gw.body._embedded.associations[i].pvalue)
  }
  console.log('snp' + assoSnp[0] + ' ' + assoSnp[3])
  /* for (let i in assoSnp) {
    console.log('test' + i)
    try {
      const gtLoc = await superagent.get(gtex + assoSnp[i]).set('Accept', 'application/json')
      if (gtloc.body.error) {
        locationEachRs.push('NAN' + express)
      }
    } catch (e) {
      console.log('ERROR')
    }
    // console.log('3' + locationEachRs[0])
  }
  console.log('1' + assoSnp[0])
  console.log('2' + assoSnp[3])
  console.log('3' + locationEachRs[0])
  */
  let result = {
    snp: assoSnp,
    pvalue: assoPvalue
  }
  res.render('association', {
    dataAsso: result
  })
}
async function searchSnpByLocation(location, res) {
  const gw = await superagent.get('https://www.ebi.ac.uk/gwas/beta/rest/api/snpLocation/' + location).set('Accept', 'application/json')
  let snpList = []
  for (let i in gw.body._embedded.singleNucleotidePolymorphisms) {
    snpList.push(gw.body._embedded.singleNucleotidePolymorphisms[i].rsId)
  }
  console.log('snp0' + snpList[0])
  let result = {
    snp: snpList
  }
  res.render('location', {
    dataLoc: result
  })
}
module.exports.APIEnsembl = APIEnsembl
module.exports.searchRSNcbi = searchRSNcbi
module.exports.searchRs = searchRs
module.exports.searchSnpByLocation = searchSnpByLocation
module.exports.searchAssociationsByTraits = searchAssociationsByTraits
